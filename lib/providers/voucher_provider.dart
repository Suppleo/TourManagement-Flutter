import 'package:flutter/material.dart';
import 'package:graphql_flutter/graphql_flutter.dart';
import '../core/network/graphql_service.dart';
import '../graphql/queries/voucher_queries.dart';
import '../graphql/mutations/voucher_mutations.dart';
import '../models/voucher.dart';

class VoucherProvider with ChangeNotifier {
  List<Voucher> _vouchers = [];
  bool _isLoading = false;
  String? _error;

  List<Voucher> get vouchers => _vouchers;
  bool get isLoading => _isLoading;
  String? get error => _error;

  void _setLoading(bool loading) {
    _isLoading = loading;
    notifyListeners();
  }

  void _setError(String? error) {
    _error = error;
    notifyListeners();
  }

  /// Fetch danh s√°ch t·∫•t c·∫£ vouchers t·ª´ server
  Future<void> fetchVouchers() async {
    try {
      _setLoading(true);
      _setError(null);

      final client = GraphQLService.clientNotifier?.value;
      if (client == null) throw Exception('GraphQL client ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o');

      final result = await client.query(
        QueryOptions(
          document: gql(queryVouchers),
          fetchPolicy: FetchPolicy.networkOnly, // Lu√¥n fetch t·ª´ server
        ),
      );

      if (result.hasException) {
        debugPrint('‚ùå L·ªói fetch: ${result.exception}');
        throw result.exception!;
      }

      final List<dynamic> voucherData = result.data!['vouchers'] as List? ?? [];
      _vouchers = voucherData.map((e) => Voucher.fromJson(e)).toList();

      debugPrint('üì¶ S·ªë l∆∞·ª£ng voucher: ${_vouchers.length}');
      _setError(null);
    } catch (e) {
      debugPrint('‚ùå Exception in fetchVouchers: $e');
      _setError(e.toString());
      rethrow;
    } finally {
      _setLoading(false);
    }
  }

  /// T·∫°o voucher m·ªõi
  Future<Voucher> createVoucher(Map<String, dynamic> input) async {
    try {
      _setError(null);

      final client = GraphQLService.clientNotifier?.value;
      if (client == null) throw Exception('GraphQL client ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o');

      final result = await client.mutate(
        MutationOptions(
          document: gql(mutationCreateVoucher),
          variables: input,
        ),
      );

      if (result.hasException) {
        debugPrint('‚ùå L·ªói t·∫°o voucher: ${result.exception}');
        throw result.exception!;
      }

      final voucherData = result.data?['createVoucher'];
      if (voucherData != null) {
        final newVoucher = Voucher.fromJson(voucherData);
        _vouchers.add(newVoucher);
        notifyListeners();
        return newVoucher;
      } else {
        // Fallback: fetch l·∫°i to√†n b·ªô danh s√°ch
        await fetchVouchers();
        throw Exception('Kh√¥ng th·ªÉ t·∫°o voucher');
      }
    } catch (e) {
      _setError(e.toString());
      rethrow;
    }
  }

  /// C·∫≠p nh·∫≠t voucher
  Future<Voucher> updateVoucher(String id, Map<String, dynamic> input) async {
    try {
      _setError(null);

      final client = GraphQLService.clientNotifier?.value;
      if (client == null) throw Exception('GraphQL client ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o');

      final result = await client.mutate(
        MutationOptions(
          document: gql(mutationUpdateVoucher),
          variables: {'id': id, ...input},
        ),
      );

      if (result.hasException) {
        debugPrint('‚ùå L·ªói c·∫≠p nh·∫≠t voucher: ${result.exception}');
        throw result.exception!;
      }

      final voucherData = result.data?['updateVoucher'];
      if (voucherData != null) {
        final updatedVoucher = Voucher.fromJson(voucherData);
        final index = _vouchers.indexWhere((v) => v.id == id);

        if (index != -1) {
          _vouchers[index] = updatedVoucher;
          notifyListeners();
          debugPrint('‚úÖ ƒê√£ c·∫≠p nh·∫≠t voucher ${updatedVoucher.code}');
          return updatedVoucher;
        } else {
          // N·∫øu kh√¥ng t√¨m th·∫•y trong danh s√°ch local, fetch l·∫°i
          await fetchVouchers();
          throw Exception('Voucher kh√¥ng t·ªìn t·∫°i trong danh s√°ch local');
        }
      } else {
        throw Exception('Kh√¥ng nh·∫≠n ƒë∆∞·ª£c d·ªØ li·ªáu voucher sau khi c·∫≠p nh·∫≠t');
      }
    } catch (e) {
      _setError(e.toString());
      rethrow;
    }
  }

  /// Xo√° voucher
  Future<bool> deleteVoucher(String id) async {
    try {
      _setError(null);

      // T√¨m voucher tr∆∞·ªõc khi x√≥a ƒë·ªÉ log
      final voucherToDelete = _vouchers.firstWhere(
            (v) => v.id == id,
        orElse: () => throw Exception('Voucher kh√¥ng t·ªìn t·∫°i'),
      );

      debugPrint('üóëÔ∏è ƒêang x√≥a voucher: ${voucherToDelete.code} (ID: $id)');

      final client = GraphQLService.clientNotifier?.value;
      if (client == null) throw Exception('GraphQL client ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o');

      final result = await client.mutate(
        MutationOptions(
          document: gql(mutationDeleteVoucher),
          variables: {'id': id},
        ),
      );

      if (result.hasException) {
        debugPrint('‚ùå L·ªói xo√° voucher: ${result.exception}');
        throw result.exception!;
      }

      // Ki·ªÉm tra k·∫øt qu·∫£ x√≥a
      final deleteResult = result.data?['deleteVoucher'];
      debugPrint('üìã K·∫øt qu·∫£ x√≥a t·ª´ server: $deleteResult');

      if (deleteResult == true) {
        // X√≥a kh·ªèi danh s√°ch local
        final beforeCount = _vouchers.length;
        _vouchers.removeWhere((v) => v.id == id);
        final afterCount = _vouchers.length;

        debugPrint('üìä Vouchers tr∆∞·ªõc x√≥a: $beforeCount, sau x√≥a: $afterCount');

        if (beforeCount > afterCount) {
          notifyListeners();
          debugPrint('‚úÖ ƒê√£ x√≥a voucher ${voucherToDelete.code} th√†nh c√¥ng');
          return true;
        } else {
          debugPrint('‚ö†Ô∏è Voucher kh√¥ng ƒë∆∞·ª£c x√≥a kh·ªèi danh s√°ch local');
          // Force refresh n·∫øu local update kh√¥ng th√†nh c√¥ng
          await fetchVouchers();
          return true;
        }
      } else {
        throw Exception('Server kh√¥ng x√°c nh·∫≠n vi·ªác x√≥a voucher');
      }
    } catch (e) {
      debugPrint('‚ùå Exception in deleteVoucher: $e');
      _setError(e.toString());
      rethrow;
    }
  }

  /// T√¨m voucher theo ID
  Voucher? getVoucherById(String id) {
    try {
      return _vouchers.firstWhere((v) => v.id == id);
    } catch (e) {
      return null;
    }
  }

  /// L·ªçc voucher theo tr·∫°ng th√°i
  List<Voucher> getVouchersByStatus(String status) {
    return _vouchers.where((v) => v.status == status).toList();
  }

  /// Clear t·∫•t c·∫£ d·ªØ li·ªáu
  void clear() {
    _vouchers.clear();
    _error = null;
    _isLoading = false;
    notifyListeners();
  }
}
